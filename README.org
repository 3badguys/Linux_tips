* Introduction
Some tips for Linux Users.

* Software Management
#+BEGIN_SRC shell
  # Install package
  sudo apt install <software>

  sudo dpkg -i <xxx.deb>
  # If there are dependency problems, may run:
  sudo apt -f install
#+END_SRC

* Text Editor
** Emacs
I like Emacs, and it is the best editor in the world.
Configuration: [[https://github.com/3badguys/.emacs.d][3badguys's Emacs configuration]]

** Vim
Vim is just an alternative choice and I don't really like it.

* PDF Viewer
** Zathura
Zathura is a highly customizable and functional document viewer with vi-styled keybindings. It provides a minimalistic and space saving interface as well as an easy usage that mainly focuses on keyboard interaction. Different file formats are supported through plugins. Support is available for PDF, PS, DjVu and CB files.

*** Installation
#+BEGIN_SRC shell
sudo apt install zathura zathura-djvu zathura-ps zathura-cb
#+END_SRC

*** Key Binding(Default)
| Shortcut | Description                            |
|----------+----------------------------------------|
| Tab      | Show index and switch to index mode    |
| :        | Enter command                          |
| Escape   | Abort                                  |
| q        | Quit                                   |
| d        | Toggle dual page view                  |
| /, ?     | Search for text                        |
| n, N     | Search for the next or previous result |
| o, O     | Open ducument                          |
| gg       | Go to the first                        |
| G        | Go to the last                         |
| nG       | Go to the nth page                     |
| h, Left  | Scroll to the left                     |
| k, Down  | Scroll to the down                     |
| j, Up    | Scroll to the up                       |
| l, Right | Scroll to the right                    |
| C-f      | Scroll page down                       |
| C-b      | Scroll page up                         |
| C-d      | Scroll half a page down                |
| C-u      | Scroll half a page up                  |
| r        | Rotate the page                        |
| R        | Reload the document                    |
| C-r      | Recolor(grayscale and invert colors)   |
| a        | Adjust window in best-fit mode         |
| s        | Adjust window in width mode            |
| +        | Zoom in                                |
| -        | Zoom out                               |
| =        | Zoom to original size                  |
| C-m      | Toggle inputbar                        |
| C-n      | Toggle statusbar                       |
| f        | Follow links                           |
| F        | Display link target                    |

*** Configuration
emacs ~/.config/zathura/zathurarc
#+BEGIN_SRC shell
set incremental-search true
set show-v-scrollbar true
set selection-clipboard clipboard
#+END_SRC

* Keyborad
** Test
#+BEGIN_SRC shell
  showkey -a
  sudo showkey -k
#+END_SRC

** Recommendation
+ Kinesis Advantage2 *BROWN*
+ X-Bows Nature *RED*
+ Cherry G80-3000/3494 *RED*
+ DasKeyborad Model S *GREEN*

** xmodmap
xmodmap is a utility for modifying keymaps and pointer button mappings in Xorg.
#+BEGIN_SRC shell
  # When you restart, the .Xmodmap will run automatically.
  xmodmap ~/.Xmodmap
#+END_SRC
[[file:dotfiles/.Xmodmap][.Xmodmap]]

* Code Lines Count
#+BEGIN_SRC shell
  ### Install cloc
  git clone https://github.com/3badguys/cloc.git
  cd cloc
  sudo ln -s `pwd`/cloc /usr/local/bin/cloc  # `pwd` get the current path

  ### Use cloc
  cd <code_path>
  cloc .
#+END_SRC

* Terminal
** PS1
#+BEGIN_SRC shell
  export PS1="\[\033[01;36m\][\u\[\033[01;35m\]@\[\033[01;36m\]\h \[\033[01;34m\]\w \[\033[01;37m\]\$?\[\033[01;36m\] ]\$\[\033[00m\] "
#+END_SRC

** dircolors
Run *ls* on a folder with directories that have a 777 permission, then these directories's color is unreadable.

#+BEGIN_SRC shell
  dircolors -p > ~/.dircolors
  # change .dircolors's OTHER_WRITABLE option from 34;42 to 30;42
  eval $(dircolors ~/.dircolors)
#+END_SRC

** rxvt-unicode(urxvt)
URxvt is a customizable terminal emulator forked from rxvt. Features of rxvt-unicode include international language support through Unicode, transparency, the ability to display multiple font types and support for Perl extensions. URxvt is one of the most popular terminal emulator in UNIX world, especially on Unixporn. It’s well known for being lightweight and riceable. But just like any other software in UNIX world, it’s ugly out of the box. So, we should configure it before we use it. URxvt configurations is commonly placed in ~/.Xresources file.

*** Installation
#+BEGIN_SRC shell
  sudo apt install rxvt-unicode
  xrdb ~/.Xresources # make the configuration work
#+END_SRC

*** Configuration
[[file:dotfiles/.Xresources][.Xresources]]

** lilyterm
LilyTerm is a terminal emulator based off of libvte that aims to be fast and lightweight, Licensed under GPLv3.

*** Installation
#+BEGIN_SRC shell
  sudo apt install libvte-dev

  git clone https://github.com/Tetralet/LilyTerm.git
  cd LilyTerm
  ./configure
  make
  sudo make install
#+END_SRC

*** Configuration
[[file:dotfiles/lilyterm/default.conf][default.conf]]

** tmux
tmux is a terminal multiplexer for Unix-like operating systems. It allows multiple terminal sessions to be accessed simultaneously in a single window. It is useful for running more than one command-line program at the same time. It can also be used to detach processes from their controlling terminals, allowing SSH sessions to remain active without being visible.

*** Installation
#+BEGIN_SRC shell
  sudo apt install tmux

  # cygwin copy to system clipborad
  # use tmux-yank plugin
  git clone https://github.com/tmux-plugins/tmux-yank
  # cygutils contain getclip/putclip
  apt-cyg install cygutils-extra
#+END_SRC

*** Configuration
[[file:dotfiles/.tmux.conf][.tmux.conf]]

*** CheatSheet
[[file:material/tmux_cheat_sheet.pdf][tmux_cheat_sheet]]

** mintty
If you use git-bash or cygwin in windows system, you may consider to config your mintty terminal through [[file:dotfiles/.minttyrc][.minttyrc]]:
#+BEGIN_SRC  shell
  #
  # dotfiles/.minttyrc - Configuration file for mintty terminal
  #

  BoldAsFont=no
  Font=Consolas
  FontHeight=11
  Rows=45
  Term=xterm-256color

  ForegroundColour=131,148,150
  BackgroundColour=0,43,54
  CursorColour=220,50,47

  Black=7,54,66
  BoldBlack=0,43,54
  Red=220,50,47
  BoldRed=203,75,22
  Green=133,153,0
  BoldGreen=88,110,117
  Yellow=181,137,0
  BoldYellow=101,123,131
  Blue=38,139,210
  BoldBlue=131,148,150
  Magenta=211,54,130
  BoldMagenta=108,113,196
  Cyan=42,161,152
  BoldCyan=147,161,161
  White=238,232,213
  BoldWhite=253,246,227

  Scrollbar=none

  CursorType=block

#+END_SRC

* Git
** Installation
#+BEGIN_SRC shell
  sudo apt install git
  git --version
#+END_SRC

** Generate SSH Public Key
#+BEGIN_SRC shell
  ssh-keygen -o
  cat ~/.ssh/id_rsa.pub
#+END_SRC

** Completion
The function of completion just like git bash.
#+BEGIN_SRC shell
  git clone https://github.com/git/git.git
  cp git/contrib/completion/git-completion.bash ~/.git-completion.bash
  # Add the next line to ~/.bashrc
  source ~/.git-completion.bash
#+END_SRC

** Frequently-used command
#+BEGIN_SRC shell
  git clone <repo-url>

  git status
  git log

  # Summarize git log output
  git shortlog -sn

  git diff
  git diff --stat
  git diff <commit-id> --stat

  git branch
  git branch -a
  git checkout <branch-name>

  git remote -v
  git remote add origin <remote-url>

  # merge upstream to local
  git remote add upstream <upstream-url>
  git fetch upstream
  git merge upstream/master

  # config file is ~/.gitconfig
  git config --list
  git config --global user.name <user-name>
  git config --global user.email <user-email>
  git config --global core.editor emacs
  # avoid to input username and password
  git config --global credential.helper store
  # run git command in eshell, to avoid `WARNING: terminal is not fully functional`
  git config --global core.pager '`test "$TERM" = "dumb" && echo cat || echo less`'

  git reset <commit-id> --hard

  git checkout -b <local-branch> <remote-branch>

  git add .
  git commit -m "commit-massage"
  git push origin <remote-branch>

  git commit --amend
  git commit --amend --author="Author Name <email@address.com>"
  git push orgin <remote-branch>

  git rebase -i HEAD~2
  git push -f origin <remote-branch>

  git checkout <master_branch>
  git pull
  git checkout <develop_branch>
  git rebase <master_branch>
  git push -f origin <develop_branch>

  # handle conflicts
  # method 1. by cherry-pick
  git checkout <master_branch>
  git branch -D <develop_branch> # record develop_branch's newest commit-id as <new_commit_id>
  git pull
  git checkout -b <develop_branch>
  git cherry-pick <new_commit_id>
  # after handle conflicts, continue to cherry-pick
  git cherry-pick --continue
  git push -f origin <develop_branch>
  # method 2. by rebase
  git checkout <master_branch>
  git pull
  git checkout <develop_branch>
  git rebase <master_branch>
  # after handle confilcts, continue to rebase
  git rebase --continue
  git push -f origin <develop_branch>

  # delete a remote branch
  git push origin --delete <remote-branch>
  # Alternative: push a empty local branch to remote
  git push origin :<remote-branch>

  # save a stash
  git stash
  git stash save "stash_message"
  # list stash
  git stash list
  # show the last stash
  git stash show
  # show the specific stash
  git stash show stash@{index}
  # apply the last stash
  git stash apply
  # apply the specific stash
  git stash apply stash@{index}
  # drop the last stash
  git stash drop
  # drop the special stash
  git stash drop stash@{index}
  # apply the last stash and drop it
  git stash pop
  # apply the specific stash and drop it
  git stash pop stash@{index}
  # clear all stash
  git stash clear
#+END_SRC

** git submodule
Submodules allow you to keep a Git repository as a subdirectory of another Git repository. This lets you clone another repository into your project and keep your commits separate.
#+BEGIN_SRC shell
  # Add a submodule, .gitmodules will be changed
  git submodule add {remote_url} {local_path}

  # After clone a project contain submodules
  git submodule init
  git submodule update
  # Alternative
  git submodule update --init --recursive

  # Delete a submodule
  rm -rf {local_path}
  emacs .gitmodules
  emacs .git/config
  rm -rf .git/modules/{local_path}
#+END_SRC

* Shell Command
** date, time and time-zone
#+BEGIN_SRC shell
  date
  date -R

  # Asia -> China -> Beijing Time
  tzselect
  # Add to '.bashrc' or '.profile' in your home directory
  TZ='Asia/Shanghai'; export TZ
  # To make this change permanent
  source ~/.bashrc

  timedatectl status
  timedatectl list-timezones
  timedatectl set-timezone {ZONE e.g. Asia/Shanghai}
#+END_SRC

** sshpass
Noninteractive ssh password provider.

*** Installation
#+BEGIN_SRC shell
  sudo apt install sshpass
#+END_SRC

*** Usage
#+BEGIN_SRC shell
  # Copy remote server's file to local
  sshpass -p {password} scp {remote_user}@{remote_IP}:{remote_FILE} {local_DIR}

  # Copy local file to remote server
  sshpass -p {password} scp {local_FILE} {remote_user}@{remote_IP}:{remote_DIR}

  # Run command in remote server
  sshpass -p {password} ssh {remote_user}@{remote_IP}
  # Disable strict host key checking
  sshpass -p {password} ssh -o StrictHostKeyChecking=no {remote_user}@{remote_IP}

  # Example
  for i in $(seq 168 269); do sshpass -p {password} scp root@{remote_IP}:/root/code_proj/GTM/GTM$i* ./; done
#+END_SRC

** FIGlet
FIGlet is a program for making large letters out of ordinary text.

*** Installation
#+BEGIN_SRC shell
  sudo apt install figlet
#+END_SRC

*** Usage
#+BEGIN_SRC shell
  figlet "FIGlet"
  # Output:
  #  ___ ___ ___ _     _
  # | __|_ _/ __| |___| |_
  # | _| | | (_ | / -_)  _|
  # |_| |___\___|_\___|\__|
#+END_SRC

** ip commands
/ip/ command is somewhat similar to /ifconfig/ command but it's much more powerful with much more functionalities attached to it.

#+BEGIN_SRC shell
  # view network statistics
  ip -s link

  # show information of network interface
  ip addr show {iface_name}
  ip a s {iface_name}

  # enable & disable network interface
  ip link set {iface_name} up
  ip link set {iface_name} down

  # assign IP address to network interface
  ip addr add {ip_addr}/{netmask} dev {iface_name}

  # remove IP address from network interface
  ip addr del {ip_addr}/{netmask_len} dev {iface_name}
  ip addr flush dev {iface_name}

  # check network routing information
  ip route show
  ip route get {ip_addr}

  # view entries in ARP cache
  ip neigh

  # delete ARP entry
  ip neigh del {ip_addr} dev {iface_name}

  # help
  ip help
#+END_SRC

** dd
On Unix-like operating systems, the dd command copies a file, converting the format of the data in the process.
#+BEGIN_SRC shell
  # Example:
  dd bs=4M if=xxx.img of=/dev/sdx status=progress
#+END_SRC

** tree
#+BEGIN_SRC shell
  # show color when using tree command
  alias tree='tree -FC'
#+END_SRC

** proxychains
ProxyChains is a UNIX program, that hooks network-related libc functions in DYNAMICALLY LINKED programs via a preloaded DLL (dlsym(), LD_PRELOAD) and redirects the connections through SOCKS4a/5 or HTTP proxies. It supports TCP only (no UDP/ICMP etc).
#+BEGIN_SRC shell
  git clone https://github.com/rofl0r/proxychains-ng.git
  cd proxychains-ng
  make && sudo make install

  cp src/proxychains.conf /etc/proxychains.conf
  # change config of proxychains.conf, e.g. socks5 127.0.0.1 1080
  sudo emacs /etc/proxychains.conf

  # Usage
  proxychains4 <command, e.g. git clone ???>
#+END_SRC
